#!usr/bin/perl -w
use List::Util qw(max min);
use POSIX qw(ceil floor);
use Statistics::Distributions (uprob);
use Excel::Writer::XLSX;
use Spreadsheet::Read;
use Storable qw(dclone);

$realdata = ReadData("realdata.xls");
$schoolnamesref = $realdata->[1]{cell}[1];
$schoolquota = $realdata->[1]{cell}[2];
$schooltyperef = $realdata->[1]{cell}[3];
print "@$schooltyperef \n";
$star6 = grep {$_ == 6} @$schooltyperef;
$star5 = grep {$_ == 5} @$schooltyperef;
$star4 = grep {$_ == 4} @$schooltyperef;
$star3 = grep {$_ == 3} @$schooltyperef;
$star2 = grep {$_ == 2} @$schooltyperef;

print "$star6 $star5 $star4 $star3 $star2 \n";
for(my $i = 0;$i < $school_number; ++$i)
{
	$schoolTable[$i]=
	{
		name => $schoolnamesref->[$i+1],
		quota => $schoolquota->[$i+1],
		type => $schooltyperef->[$i+1],
	};
	if($schoolTable[$i]{type} == 2)
	{
		$schoolTable[$i]{value} = 90;
	}
	elsif($schoolTable[$i]{type} == 3)
	{
		$schoolTable[$i]{value} = 100;
	}
	elsif($schoolTable[$i]{type} == 4)
	{
		$schoolTable[$i]{value} = 110;
	}
	elsif($schoolTable[$i]{type} == 5)
	{
		$schoolTable[$i]{value} = 120;
	}
	elsif($schoolTable[$i]{type} == 6)
	{
		$schoolTable[$i]{value} = 140;
	}

}
@schools = sort {$b->{type} cmp $a->{type}} @schoolTable;
foreach my $school (@schools)
{
	if($school->{type} == 2)
	{
		$starquota2 += $school->{quota};
	}
	elsif($school->{type} == 3)
	{
		$starquota3 += $school->{quota};
	}
	elsif($school->{type} == 4)
	{
		$starquota4 += $school->{quota};
	}
	elsif($school->{type} == 5)
	{
		$starquota5 += $school->{quota};
	}
	elsif($school->{type} == 6)
	{
		$starquota6 += $school->{quota};
	}
	
}



sub normaldist {
    my ($u1, $u2);  # uniformly distributed random numbers
    my $w;          # variance, then a weight
    my ($g1, $g2);  # gaussian-distributed numbers

    do {
        $u1 = 2 * rand() - 1;
        $u2 = 2 * rand() - 1;
        $w = $u1*$u1 + $u2*$u2;
    } while ( $w >= 1 );

    $w = sqrt( (-2 * log($w))  / $w );
    $g2 = $u1 * $w;
    $g1 = $u2 * $w;
    # return both if wanted, else just one
    return $g1;
}
$minimum_score = 0;
$maximum_score = 750;
$majority_ratio = 0.9;
$majority_quota = 0.9;
$student_number = 5555;
$score_mean = 450;
$score_sd = 60;
$school_number = 218;
$school_quota = 25;
$score_diff=15;
$score_bonus= 15;

@school_type = map do{if($_ < 2){120}
					 elsif($_ < 26){110}
					 elsif($_ < 66){100}
					 elsif($_ < 107){90}
					 elsif($_< 157){80}
					 else{70}
					 },
					 (0..217);


sub gentype {
    my $probability = shift ; 
    my $temp = rand();
    if($temp < $probability){
        return 1;
    }else{
        return 0;
    }
}


sub genscore {
	my ($mu, $sigma,$racetype) = @_;
	my $score;
	do {
		if($racetype)
		{$score = $mu + &normaldist * $sigma;}
		else{$score = $mu - $score_diff + &normaldist * $sigma;} 
		}
		while($score<$minimum_score or $score>$maximum_score);
	return $score;
}





sub genschoolvalues{
	my @schoolbasevalues = @{$_[0]};
	my @schoolvalues;
	for(my $i = 0; $i < @schoolbasevalues; $i++){
	$schoolvalues[$i]=(rand() - 0.5)*20 + $schoolbasevalues[$i];
	}
	
    return \@schoolvalues;    
    
}





sub genenvironment {
	
	my @studenttable = ();
	my @race=();
	for(my $i = 0; $i < $student_number; ++$i)
	{
		my (@race,@schoolvalues,@schoolrankings);
		$race[$i]=&gentype($majority_ratio);
		@schoolvalues = @{&genschoolvalues(\@school_type)};
		@schoolrankings= sort { $schoolvalues[$b]<=>$schoolvalues[$a] } (0..$school_number-1);
		
		$studenttable[$i] = 
		{id => $i,
		race => $race[$i],
		score => &genscore($score_mean, $score_sd, $race[$i]),
				
		schoolrankings => \@schoolrankings,
		
		assigned => 'society',
		
		schoolpreference => 'lowest',
		};
		
	}
	#sort students according to their scores
	@leaguetable = sort {$b->{score} <=> $a->{score}} @studenttable;
	return \@leaguetable;
}

#the benchmark mechanism follows
sub benchmarkC 
{
	my $leaguetable = shift ;
	
	
	$leaguetable=dclone $leaguetable;
	
	
	
	my %schoolquota  = my %recruits =();
	
	for(my $school=0; $school< $school_number; $school++)
	{
		
		$schoolquota{$school} = $school_quota;
		
	}
	#sort students according to their scores
	
	
	foreach my $student (@{$leaguetable})
	{
            
            for(my $i = 0; $i < $school_number; ++$i)
            {
				my $school;
				$school = $student->{schoolrankings}[$i];
		        
		        if($schoolquota{$school}>0)
                {
                    push @{$recruits{$school}}, $student;
                    $schoolquota{$school}--;
                    $student->{schoolpreference}=$i;
                    last;
		        }
            }
	}
	
	
	
	foreach my $j (keys %recruits)
	{
		foreach $student (@{$recruits{$j}}) 
		{

			$student->{assigned}=$j;

		} 

	}

return $leaguetable;
}
#scoreplus 
sub scoreplusC 
{
	my @leaguetable = ();
	my $leaguetable = shift ;
	$leaguetable = dclone $leaguetable;
	
	
	for(my $i=0;$i<$student_number; $i++)
	{
		if($leaguetable->[$i]{race}==0){
			$leaguetable->[$i]{score} += $score_diff;
		}
	}
	@leaguetable = sort {$b->{score} <=> $a->{score}} @{$leaguetable};
	$leaguetable = \@leaguetable;		
	
	
	
	
	my %schoolquota  = my %recruits =();
	
	for(my $school=0; $school< $school_number; $school++)
	{
		
		$schoolquota{$school} = $school_quota;
		
	}
	#sort students according to their scores
	
	
	foreach my $student (@{$leaguetable})
	{
            
            for(my $i = 0; $i < $school_number; ++$i)
            {
				my $school;
				$school = $student->{schoolrankings}[$i];
		        
		        if($schoolquota{$school}>0)
                {
                    push @{$recruits{$school}}, $student;
                    $schoolquota{$school}--;
                    $student->{schoolpreference}=$i;
                    last;
		        }
            }
	}
	
	
	
	foreach my $j (keys %recruits)
	{
		foreach $student (@{$recruits{$j}}) 
		{

			$student->{assigned}=$j;

		} 

	}

return $leaguetable;
}
#majority quota

sub majorityquotaC 
{
	my $leaguetable = shift ;
	$leaguetable=dclone $leaguetable;
	
	
	
	my %schoolquota  = my %recruits = my %schoolmajorityquota = ();
	
	for(my $school=0; $school< $school_number; $school++)
	{
		
		$schoolquota{$school} = $school_quota;
		$schoolmajorityquota{$school} = 22;
		
	}
	#sort students according to their scores
	
	
	foreach my $student (@{$leaguetable})
	{
         if($student->{race}==0){
            for(my $i = 0; $i < $school_number; ++$i)
            {
				my $school;
				$school = $student->{schoolrankings}[$i];
		        
		        if($schoolquota{$school}>0 )
                {
                    push @{$recruits{$school}}, $student;
                    $schoolquota{$school}--;
                    $student->{schoolpreference}=$i;
                    last;
		        }
            }
		}else{
			for(my $i = 0; $i < $school_number; ++$i)
            {
				my $school;
				$school = $student->{schoolrankings}[$i];
		        
		        if($schoolquota{$school}>0 and $schoolmajorityquota{$school}>0 )
                {
                    push @{$recruits{$school}}, $student;
                    $schoolquota{$school}--;
                    $schoolmajorityquota{$school}--;
                    $student->{schoolpreference}=$i;
                    last;
		        }
            }
			
		}
	}
	
	
	
	foreach my $j (keys %recruits)
	{
		foreach $student (@{$recruits{$j}}) 
		{

			$student->{assigned}=$j;

		} 

	}

return $leaguetable;
}
#minority reserve
sub minorityreserveC 
{
	my $leaguetable = shift ;
	$leaguetable=dclone $leaguetable;
	
	
	
	my %schoolquota  = my %recruits =my %schoolminorityreserve = ();
	
	for(my $school=0; $school< $school_number; $school++)
	{
		
		$schoolquota{$school} = $school_quota;
		$schoolminorityreserve{$school} = 3;
		
		
	}
	#sort students according to their scores
	
	
	foreach my $student (@{$leaguetable})
	{
           if($student->{race}==0){ 
            for(my $i = 0; $i < $school_number; ++$i)
            {
				my $school;
				$school = $student->{schoolrankings}[$i];
		        
		        if($schoolminorityreserve{$school}>0)
                {
                    push @{$recruits{$school}}, $student;
                    $student->{assigned}=$school;
                    $schoolquota{$school}--;
                    $schoolminorityreserve{$school}--;
                    $student->{schoolpreference}=$i;
                    last;
		        }
            }
		}
	}
	foreach my $student (@{$leaguetable})
	{
           if($student->{race}==1 or ($student->{race}==0 and $student->{assigned} eq "society")){ 
            for(my $i = 0; $i < $school_number; ++$i)
            {
				my $school;
				$school = $student->{schoolrankings}[$i];
		        
		        if($schoolquota{$school}>0)
                {
                    push @{$recruits{$school}}, $student;
                    $student->{assigned}=$school;
                    $schoolquota{$school}--;
                    $student->{schoolpreference}=$i;
                    last;
		        }
            }
		}
	}
	
	
	

return $leaguetable;
}

sub writeExcel{
	my $name = shift;
	my %table = ();
	$table{benchmark} = shift;
	$table{scoreplus} = shift;
	$table{majorityquota}= shift;
	$table{minorityreserve}= shift;
	
	my $workbook = Excel::Writer::XLSX->new($name.".xlsx");
	$format = $workbook->add_format();
	$format->set_bold(); 
	$format->set_color('purple');
	$format->set_align('center');
	
	foreach my $model (qw(benchmark scoreplus majorityquota minorityreserve)){
	$worksheet =  $workbook->add_worksheet();

	

	$col=$row=0;


	$worksheet->write($row,$col,'ID',$format);
	$worksheet->write($row,$col+1,'race',$format);
	$worksheet->write($row,$col+2,'assigned',$format);	
	$worksheet->write($row,$col+3,'score',$format);
	$worksheet->write($row,$col+4,'schoolpreferenceranking',$format);
	for(my $i=0; $i < $student_number; ++$i)
	{
		$worksheet->write($row+$i+1,$col,$table{$model}->[$i]{id});
		$worksheet->write($row+$i+1,$col+1,$table{$model}->[$i]{race});
		$worksheet->write($row+$i+1,$col+2,$table{$model}->[$i]{assigned},$format);	
		$worksheet->write($row+$i+1,$col+3,$table{$model}->[$i]{score},$format);
		$worksheet->write($row+$i+1,$col+4,$table{$model}->[$i]{schoolpreference},$format);
	}
	}
}	

for(my $i=1; $i <= 2; ++$i)
{
	@league_table=@{&genenvironment};
	
	$table{benchmark}=&benchmarkC(\@league_table);
	$table{scoreplus}=&scoreplusC(\@league_table);
	$table{majorityquota}=&majorityquotaC(\@league_table);
	$table{minorityreserve}=&minorityreserveC(\@league_table);
	
	
	&writeExcel("simulation$i",$table{benchmark},$table{scoreplus},$table{majorityquota},$table{minorityreserve});
	
}







