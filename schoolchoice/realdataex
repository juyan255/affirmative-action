#!usr/bin/perl -w
use List::Util qw(max min);
use POSIX qw(ceil floor);
use Statistics::Distributions (uprob);
use Excel::Writer::XLSX;
use Spreadsheet::Read;
use Storable qw(dclone);

$minimum_score = 0;
$maximum_score = 750;
$majority_ratio = 0.85;
$majority_quota = 0.95;
$student_number = 40000;
$score_mean = 450;
$score_sd = 60;
$school_number = 217;
#$school_quota = 25;
$score_diff=15;
$score_bonus= 15;

$realdata = ReadData("realdata.xls");

$school_quota = $realdata->[1]{cell}[2];
$school_type = $realdata->[1]{cell}[5];
=c%school_table = ();
for($i=1;$i<=$school_number;$i++)
{
    $school_table[$i]=
    {id   => $i,
     quota=> $school_quota->[$i],
     type => $school_type->[$i],
    }
}
=cut
$schooltype_value =
{'1' => 50,
 '2' => 60,
 '3' => 70,
 '4' => 80,
 '5' => 90,
};	




sub normaldist {
    my ($u1, $u2);  # uniformly distributed random numbers
    my $w;          # variance, then a weight
    my ($g1, $g2);  # gaussian-distributed numbers

    do {
        $u1 = 2 * rand() - 1;
        $u2 = 2 * rand() - 1;
        $w = $u1*$u1 + $u2*$u2;
    } while ( $w >= 1 );

    $w = sqrt( (-2 * log($w))  / $w );
    $g2 = $u1 * $w;
    $g1 = $u2 * $w;
    # return both if wanted, else just one
    return $g1;
}




sub gentype {
    my $probability = shift ; 
    my $temp = rand();
    if($temp < $probability){
        return 1;
    }else{
        return 0;
    }
}


sub genscore {
    my ($mu, $sigma,$racetype) = @_;
    my $score;
    do {
	if($racetype)
	{$score = $mu + &normaldist * $sigma;}
	else{$score = $mu - $score_diff + &normaldist * $sigma;} 
    }
    while($score<$minimum_score or $score>$maximum_score);
    return $score;
}





sub genschoolvalues{

    my @schoolvalues;
    for(my $i = 1; $i <= $school_number; $i++){
	$schoolvalues[$i]=(rand() - 0.5)*20 + $schooltype_value->{$school_type->[$i]};
    }
    
    return \@schoolvalues;    
    
}





sub genenvironment {
    
    my %studenttable = ();
    my @race=();
    for(my $i = 0; $i < $student_number; ++$i)
    {
	my (@race,@schoolvalues,@schoolrankings);
	$race[$i]=&gentype($majority_ratio);
	$schoolvalues = genschoolvalues();
	@schoolrankings= sort { $schoolvalues->[$b]<=>$schoolvalues->[$a] } (1..$school_number);
	
	$studenttable{$i}= 
	{
	 race => $race[$i],
	 score => &genscore($score_mean, $score_sd, $race[$i]),
	 
	 schoolrankings => \@schoolrankings,
	 
	 assigned => '0',
	 
	 schoolpreference => '0',
	};

	
    }
   
   
    return \%studenttable;
}

#the benchmark mechanism follows
sub benchmarkC 
{
    my $leaguetable = shift ;
    
    
    $leaguetable=dclone $leaguetable;
    
    @leaguetable = sort {$studenttable{$b}{score} <=> $studenttable{$a}{score}} (0..$student_number-1);
    
    my %schoolquota  = my %recruits =();
    
    for(my $school=1; $school<= $school_number; $school++)
    {
	
	$schoolquota{$school} = $school_quota->[$school];
	
    }
    #sort students according to their scores
    
    
    foreach my $student (@{$leaguetable})
    {
	
	for(my $i = 0; $i < $school_number; ++$i)
	{
	    my $school;
	    $school = $student->{schoolrankings}[$i];
	    
	    if($schoolquota{$school}>0)
	    {
		push @{$recruits{$school}}, $student;
		$student->{assigned}=$school;
		$schoolquota{$school}--;
		$student->{schoolpreference}=$i+1;
		last;
	    }
	}
    }
    
    
    


    return $leaguetable;
}
#scoreplus 
sub scoreplusC 
{
    my @leaguetable = ();
    my $leaguetable = shift ;
    $leaguetable = dclone $leaguetable;
    
    
    for(my $i=0;$i<$student_number; $i++)
    {
	if($leaguetable->[$i]{race}==0){
	    $leaguetable->[$i]{score} += $score_bonus;
	}
    }
    @leaguetable = sort {$b->{score} <=> $a->{score}} @{$leaguetable};
    $leaguetable = \@leaguetable;		
    
    
    
    
    my %schoolquota  = my %recruits =();
    
    for(my $school=1; $school<= $school_number; $school++)
    {
	
	$schoolquota{$school} = $school_quota->[$school];
	
    }
    #sort students according to their scores
    
    
    foreach my $student (@{$leaguetable})
    {
	
	for(my $i = 0; $i < $school_number; ++$i)
	{
	    my $school;
	    $school = $student->{schoolrankings}[$i];
	    
	    if($schoolquota{$school}>0)
	    {
		push @{$recruits{$school}}, $student;
		$student->{assigned}=$school;
		$schoolquota{$school}--;
		$student->{schoolpreference}=$i+1;
		last;
	    }
	}
    }
    
    


    return $leaguetable;
}
#majority quota

sub majorityquotaC 
{
    my $leaguetable = shift ;
    $leaguetable=dclone $leaguetable;
    
    
    
    my %schoolquota  = my %recruits = my %schoolmajorityquota = ();
    
    for(my $school=1; $school<= $school_number; $school++)
    {
	
	$schoolquota{$school} = $school_quota->[$school];
	$schoolmajorityquota{$school} = ceil($majority_quota *  $school_quota->[$school]);
	
    }
    #sort students according to their scores
    
    
    foreach my $student (@{$leaguetable})
    {
	if($student->{race}==0){
            for(my $i = 0; $i < $school_number; ++$i)
            {
		my $school;
		$school = $student->{schoolrankings}[$i];
		
		if($schoolquota{$school}>0 )
                {
                    push @{$recruits{$school}}, $student;
		    $student->{assigned}=$school;
                    $schoolquota{$school}--;
                    $student->{schoolpreference}=$i+1;
                    last;
		}
            }
	}else{
	    for(my $i = 0; $i < $school_number; ++$i)
            {
		my $school;
		$school = $student->{schoolrankings}[$i];
		
		if($schoolquota{$school}>0 and $schoolmajorityquota{$school}>0 )
		{
		    push @{$recruits{$school}}, $student;
		    $student->{assigned}=$school;
		    $schoolquota{$school}--;
		    $schoolmajorityquota{$school}--;
		    $student->{schoolpreference}=$i+1;
		    last;
		}
            }
	    
	}
    }
    
    
    
    

    return $leaguetable;
}
#minority reserve
=sub minorityreserveC 
{
    my $leaguetable = shift ;
    $leaguetable=dclone $leaguetable;
    
    
    
    my %schoolquota  = my %recruits =my %schoolminorityreserve = ();
    
    for(my $school=1; $school<= $school_number; $school++)
    {
	
	$schoolquota{$school} = $school_quota->[$school];
	$schoolminorityreserve{$school} = $school_quota->[$school]-ceil($majority_quota *  $school_quota->[$school]);
	
	
    }
    #sort students according to their scores
    
    
    foreach my $student (@{$leaguetable})
    {
	if($student->{race}==0)
	{ 
            for(my $i = 0; $i < $school_number; ++$i)
            {
		my $school;
		$school = $student->{schoolrankings}[$i];
		
		if($schoolminorityreserve{$school}>0)
		{
		    push @{$recruits{$school}}, $student;
		    $student->{assigned}=$school;
		    $schoolquota{$school}--;
		    $schoolminorityreserve{$school}--;
		    $student->{schoolpreference}=$i+1;
		    last;
		}elsif($schoolminorityreserve{$school}==0 and $student->{score} > my $minimum = min(map $_->{score},my @templist = grep {$_->{race}==0} @{$recruits{$school}}))
		{
		    while( my( $index, $value ) = each @{$recruits{$school}} ) 
		    {
			splice @{$recruits{$school}}, $index, 1, $student if( $value->{race}==0 and $value->{score}==$minimum)
		    }

		}
	    }
	}
	foreach my $student (@{$leaguetable})
	{
	    if($student->{race}==1 or ($student->{race}==0 and $student->{assigned} eq "society")) { 
		for(my $i = 0; $i < $school_number; ++$i)
		{
		    my $school;
		    $school = $student->{schoolrankings}[$i];
		    
		    if($schoolquota{$school}>0)
		    {
			push @{$recruits{$school}}, $student;
			$student->{assigned}=$school;
			$schoolquota{$school}--;
			$student->{schoolpreference}=$i+1;
			last;
		    }
		}
	    }
	}
	
	
	

	return $leaguetable;
    }
=cut
#   is subroutine calculates three different types (No Affirmative Action, Majority Quotas	#
# and minority reserves) of Deferred Acceptance Algorithm.									#
# Variables:
# $studentpreference: A link to the student preferences hash
# $schoolpreference: A link to the school preferences hash
# $minoritystatus: Minority status of the students
# $schoolquota: School quota size
# $minorityquota: minority quota size
#############################################################################################
    sub galeshapleyMinorityReserve {
	
	my $leaguetable = shift ;
	$leaguetable=dclone $leaguetable;
	my ( $studentpreference, $schoolpreference, $minoritystatus, $schoolquota, $minorityquota);
	foreach $id ((0..$student_number-1)){
	$studentpreference->{$id} =  
	}
	$schoolpreference 
	
	%assigned = my %gschoolquota = my %gschoolpreference = my %gstudentpreference = my %mquota = ();
	
	foreach $school (keys %{$schoolpreference})
	{
	    for($i = 0; $i<=$#{$schoolpreference->{$school}}; $i++)
	    {
		$gschoolpreference{$school}{$schoolpreference->{$school}[$i]} = $i+1;
	    }
	    
	    $mquota{$school} = $minorityquota->{$school};
	    $mquota{$school} = 0 if $type == 0;
	    
	    $gschoolquota{$school} = $schoolquota->{$school} - $mquota{$school};
	    
	    if($mquota{$school} > 0)
	    {
		$minorityschool = $school.",m";
		
		$minorityschoolnames{$minorityschool} = 1;
		for($i = 0; $i<=$#{$schoolpreference->{$school}}; $i++)
		{
		    if($minoritystatus->{$schoolpreference->{$school}[$i]} == 1)
		    { 
			$gschoolpreference{$minorityschool}{$schoolpreference->{$school}[$i]} = $i+1;
		    }
		    elsif($type==2)
		    {
			$gschoolpreference{$minorityschool}{$schoolpreference->{$school}[$i]} = $#{$schoolpreference->{$school}} + $i + 1;
		    }
		}
		$gschoolquota{$minorityschool} = $mquota{$school};
	    }
	}	
	
	foreach $student (keys %{$studentpreference})
	{
	    @temp = @{$studentpreference->{$student}};
	    @{$gstudentpreference{$student}} = ();
	    
	    for($i = 0; $i <= $#temp; $i++)
	    {
		if(exists $gschoolpreference{$temp[$i]}{$student})
		{
		    if($minoritystatus->{$student} == 1)
		    {
			if(exists $mquota{$temp[$i]} && $mquota{$temp[$i]} > 0)
			{
			    $minorityschool = $temp[$i].",m";
			    push @{$gstudentpreference{$student}}, $minorityschool;
			}
			push @{$gstudentpreference{$student}}, $temp[$i];
		    }
		    
		    elsif($type==2)
		    {
			push @{$gstudentpreference{$student}}, $temp[$i];
			if(exists $mquota{$temp[$i]} && $mquota{$temp[$i]} > 0)
			{
			    $minorityschool = $temp[$i].",m";
			    push @{$gstudentpreference{$student}}, $minorityschool;
			}
		    }
		    else{push @{$gstudentpreference{$student}}, $temp[$i]}
		}
	    }
	    #print "$student @{$studentpreference{$student}}\n";
	}
	
	$notfinished = 1;

	while($notfinished)
	{
	    $notfinished = 0;
	    my %candidates = ();
	    
	    foreach $student (keys %gstudentpreference)
	    {
		push @{$candidates{$gstudentpreference{$student}[0]}}, $student;
	    }
	    
	    foreach $college (keys %candidates)
	    {
		print "$college\n" if !exists $gschoolquota{$college};
		if($#{$candidates{$college}} > $gschoolquota{$college} - 1)
		{
		    $notfinished = 1;
		    $count = 0;
		    foreach $student (sort {$gschoolpreference{$college}{$a} <=> $gschoolpreference{$college}{$b}} @{$candidates{$college}})
		    {
			$count++;
			if($count > $gschoolquota{$college}) {$temp = shift @{$gstudentpreference{$student}}}
		    }
		}
	    }
	    
	    if(!$notfinished)
	    {
		foreach $college (sort keys %candidates)
		{
		    $collegename = $college;
		    ($collegename,$temp) = split (",", $college) if exists $minorityschoolnames{$college};
		    
		    foreach $student (sort @{$candidates{$college}}){$assigned{$student} = $collegename}
		}
	    }
	}
	return \%assigned;
    }

    sub writeExcel{
	my $name = shift;
	my %table = ();
	$table{benchmark} = shift;
	$table{scoreplus} = shift;
	$table{majorityquota}= shift;
	$table{minorityreserve}= shift;
	
	my $workbook = Excel::Writer::XLSX->new($name.".xlsx");
	$format = $workbook->add_format();
	$format->set_bold(); 
	$format->set_color('purple');
	$format->set_align('center');
	
	foreach my $model (qw(benchmark scoreplus majorityquota minorityreserve)){
	    $worksheet =  $workbook->add_worksheet();

	    

	    $col=$row=0;


	    $worksheet->write($row,$col,'ID',$format);
	    $worksheet->write($row,$col+1,'race',$format);
	    $worksheet->write($row,$col+2,'assigned',$format);	
	    $worksheet->write($row,$col+3,'score',$format);
	    $worksheet->write($row,$col+4,'schoolpreferenceranking',$format);
	    $worksheet->write($row,$col+5,'schooltype',$format);

	    for(my $i=0; $i < $student_number; ++$i)
	    {
		$worksheet->write($row+$i+1,$col,$table{$model}->[$i]{id});
		$worksheet->write($row+$i+1,$col+1,$table{$model}->[$i]{race});
		$worksheet->write($row+$i+1,$col+2,$table{$model}->[$i]{assigned},$format);	
		$worksheet->write($row+$i+1,$col+3,$table{$model}->[$i]{score},$format);
		$worksheet->write($row+$i+1,$col+4,$table{$model}->[$i]{schoolpreference},$format);

		$worksheet->write($row+$i+1,$col+5,$school_type->[$table{$model}->[$i]{assigned}],$format);
	    }
	}
    }	

    for(my $i=1; $i <= 1; ++$i)
{
    $league_table=&genenvironment();
    
    $table{benchmark}=&benchmarkC($league_table);
    $table{scoreplus}=&scoreplusC($league_table);
    $table{majorityquota}=&majorityquotaC($league_table);
    $table{minorityreserve}=&minorityreserveC($league_table);
    
    
    &writeExcel("simulation$i",$table{benchmark},$table{scoreplus},$table{majorityquota},$table{minorityreserve});
    
}







